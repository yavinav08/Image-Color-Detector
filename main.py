# -*- coding: utf-8 -*-
"""Copy of Colordetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qwxsSIm140T3XYnHuOeOoXbJL64bNXTm
"""

import numpy as np
import matplotlib.pyplot as plt
import cv2
#kMeans algorithm is used for clustering, that present in sklearn.cluster library
from sklearn.cluster import KMeans
from collections import Counter
#rgb2lab package is used to check similarity using delatE_cie76
from skimage.color import rgb2lab, deltaE_cie76

#covertion of RDB to Hex for labellings
def RGB2HEX(color):
    return "#{:02x}{:02x}{:02x}".format(int(color[0]), int(color[1]), int(color[2]))

def get_image(path_of_image):
    #reading image
    image = cv2.imread(path_of_image)
    #converting image from BGR format to RGB format
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    plt.imshow(image)
    return image

#getting colors from the image
def get_colors(image, top_colors,chart):

    #changing the dimension of image
    image=image.reshape((image.shape[0]*image.shape[1],3))
    clusters = KMeans(n_clusters = top_colors)
    s = clusters.fit_predict(image)
    counts = Counter(s)
    center_colors = clusters.cluster_centers_
    ordered_colors = [center_colors[i]/255 for i in counts.keys()]
    hexadecimal_colors = [RGB2HEX(ordered_colors[i]*255) for i in counts.keys()]
    rgb_colors = [ordered_colors[i]*255 for i in counts.keys()]
    if(chart):
      plt.figure(figsize = (6, 8))
      plt.pie(counts.values(), labels = hexadecimal_colors, colors = ordered_colors)
    else:
      return rgb_colors

get_colors(get_image('/content/CD-1.jpg'), 10,True)

get_colors(get_image('/content/CD-2.jpg'), 10,True)

get_colors(get_image('/content/CD-3.jpg'), 10,True)

get_colors(get_image('/content/CD-5.jpg'), 10,True)

get_colors(get_image('/content/CD-4.jpg'), 5,True)

get_colors(get_image('/content/CD-6.jpg'), 5,True)

imagedir=np.array(['/content/CD-1.jpg','/content/CD-2.jpg','/content/CD-3.jpg','/content/CD-4.jpg','/content/CD-5.jpg','/content/CD-6.jpg'])
colors = {
    'green': [0, 128, 0],
    'blue': [0, 0, 128],
    'yellow': [255, 255, 0]
}
plt.figure(figsize = (50,50))
for i in range(len(imagedir)):
  plt.subplot(1, len(imagedir), i+1)
  img=cv2.imread(imagedir[i])
  img=cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  plt.imshow(img)

def selected_images(images, color, threshold, colors_to_match):

    for i in range(len(images)):
        image=cv2.imread(images[i])
        image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
        image_colors = get_colors(image,colors_to_match,False)
        #converting selected color to the format
        selected_color=rgb2lab(np.uint8(np.asarray([[color]])))
        select=False
        for i in range(colors_to_match):
          curr_color = rgb2lab(np.uint8(np.asarray([[image_colors[i]]])))
          #deltaE_cie76 returns the difference between the selected color and the iteration color in the image
          diff = deltaE_cie76(selected_color, curr_color)
          #threshold is the low difference between the colors
          if (diff < threshold):
            select = True
        if(select):
          plt.subplot(1,5,i+1)
          plt.imshow(image)

plt.figure(figsize = (50, 50))

selected_images(imagedir,colors['blue'], 50, 5)